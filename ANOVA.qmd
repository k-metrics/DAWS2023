> **※本ページの内容はテキストの第９章に相当します**

```{r setup, include=FALSE}
source("./R/setup.R")
```

# 分散分析

　本章では分散分析（ANalysis Of VAriance）について学びます。分散分析は目的変数である量的変数が説明変数である因子によって影響されるかを調べる手法です。本章ではRcmdrで実行した場合のコードと出力結果のみを記載し、手順の記載は省略しますので詳細はテキストを参照してください。

::: {.callout-note collapse="false"}
## データの読み込み

1.  Rcmdrのメニューから［データ］-［データセットのロード...］を実行する
2.  ファイルダイアログで「`外来患者ストレス.RData`」ファイルを選択する
3.  アクティブデータセットが**`PatientStress`**になっていることを確認する
:::

```{r, echo=FALSE}
load("./SampleFiles/外来患者ストレス.RData")
PatientStress %>% df_print()
```

## 1元配置分散分析（P158）

### 正規分布の場合（P164）

```{r}
#| code-summary: "統計量 - 平均 - 1元配置分散分析"
#| layout-nrow: 4
#| fig-height: 7

AnovaModel.1 <- aov(健康統制感 ~ 年齢区分, data = PatientStress)
summary(AnovaModel.1)
with(PatientStress, RcmdrMisc::numSummary(健康統制感, groups = 年齢区分,
                                          statistics=c('mean', 'sd')))

# 多重検定で水準間の平均値の差を確認する
local({
 .Pairs <- multcomp::glht(AnovaModel.1,
                          linfct = multcomp::mcp(年齢区分 = "Tukey"))
 print(summary(.Pairs)) # pairwise tests
 print(confint(.Pairs, level=0.95)) # confidence intervals
 print(multcomp::cld(.Pairs, level=0.05)) # compact letter display
 old.oma <- par(oma=c(0, 5, 0, 0))
 plot(confint(.Pairs))
 par(old.oma)
})
```

::: {.callout-tip collapse="true"}
## 多重比較

**一元配置分散分析**\
一元配置分散分析（ANOVA）の帰無仮設$H_0$は「すべての水準の平均は等しい」です。したがって、対立仮説$H_1$は「すくなくとも一つの水準間の平均に差がある」となります。すなわち、帰無仮設$H_0$が棄却された場合にはどの水準間に差があるのかまでは分かりません。

```{r}
#| code-summary: "一元配置分散分析"

summary(AnovaModel.1)
```

**多重比較**\
どの水準間に差があるのかを確認するためには一元配置分散分析（`aov()`）とは別に[多重比較](https://corvus-window.com/whats_multiple_comparison/)を行う必要があります。

```{r}
#| code-summary: "多重比較（テューキー・クレーマー法）"

summary(multcomp::glht(AnovaModel.1,
                       linfct = multcomp::mcp(年齢区分 = "Tukey")))
```

**信頼区間**\
各水準間の平均値の差（推定値）が求められましたので、それを元に信頼区間を求めます。

```{r}
#| code-summary: "信頼区間"

confint(multcomp::glht(AnovaModel.1,
                       linfct = multcomp::mcp(年齢区分 = "Tukey")),
        level = 0.95)
```

この結果をプロットするとR Commanderが出力したグラフになります。

```{r}
#| code-summary: "多重比較の可視化"
#| fig-height: 7

plot(confint(multcomp::glht(AnovaModel.1,
                            linfct = multcomp::mcp(年齢区分 = "Tukey")),
             level = 0.95))

```

**別の方法**\
R　Commanderでは複数の手順を経由して多重比較を可視化していますが標準で組み込まれている`TukeyHSD()`関数を使うと一度で求めることが可能です。なお、R Commanderがこのような手順を踏んでいる理由は分かりません。

```{r}
#| code-summary: "多重比較の可視化（テューキー・クレーマー法）"
#| fig-height: 7
#| layout-nrow: 2

TukeyHSD(aov(健康統制感 ~ 年齢区分, data = PatientStress)) |> 
  print() |> 
  plot()
```
:::

### クラスカル・ウォリス検定（P168）

```{r}
#| code-summary: "統計量 - ノンパラメトリック検定 - クラスカル・ウォリス検定"
#| layout-nrow: 2

car::Tapply(ストレス反応得点 ~ 年齢区分, median, na.action=na.omit,
            data=PatientStress) # medians by group
kruskal.test(ストレス反応得点 ~ 年齢区分, data=PatientStress)
```

::: {.callout-tip collapse="true"}
## 多重比較（テキストの方法）

```{r}
#| code-summary: "データ - アクティブデータセット - アクティブデータセットの部分集合を抽出"

df1 <- subset(PatientStress, subset=年齢区分 %in% c("青年", "壮年"))
df2 <- subset(PatientStress, subset=年齢区分 %in% c("青年", "中年"))
df3 <- subset(PatientStress, subset=年齢区分 %in% c("青年", "高年"))
df4 <- subset(PatientStress, subset=年齢区分 %in% c("壮年", "中年"))
df5 <- subset(PatientStress, subset=年齢区分 %in% c("壮年", "高年"))
df6 <- subset(PatientStress, subset=年齢区分 %in% c("中年", "高年"))
```

アクティブデータセットを切り替えながら検定を行います。有意水準はボフェローニ補正により $p \lt \frac{0.05}{6} = `r 0.05/6`$ となります。

```{r}
#| code-summary: "統計量 - ノンパラメトリック検定 - 2標本ウィルコクソン検定"

with(df1, wilcox.test(ストレス反応得点 ~ 年齢区分, alternative="two.sided"))
with(df2, wilcox.test(ストレス反応得点 ~ 年齢区分, alternative="two.sided"))
with(df3, wilcox.test(ストレス反応得点 ~ 年齢区分, alternative="two.sided"))
with(df4, wilcox.test(ストレス反応得点 ~ 年齢区分, alternative="two.sided"))
with(df5, wilcox.test(ストレス反応得点 ~ 年齢区分, alternative="two.sided"))
with(df6, wilcox.test(ストレス反応得点 ~ 年齢区分, alternative="two.sided"))
```
:::

::: {.callout-tip collapse="true"}
## 多重比較（コードを書く方法）

```{r}
#| code-summary: "あまりエレガントでない方法"

ageCalssLvls <- combn(levels(PatientStress$年齢区分), 2) |> 
  t() |> 
  as.data.frame()
ageCalssLvls

for (i in c(1:nrow(ageCalssLvls))) {
  subset(PatientStress, PatientStress$年齢区分 %in% 
         c(ageCalssLvls$V1[i], ageCalssLvls$V2[i])) |>
    with(wilcox.test(ストレス反応得点 ~ 年齢区分)) |> 
    print()
  print("----------")
}
```
:::

::: {.callout-tip collapse="true"}
## 多重比較（エレガントな方法）
（検討中）
```{r, echo=FALSE, eval=FALSE}

ageCalssLvls <- combn(levels(PatientStress$年齢区分), 2) |> 
  t() |> 
  as.data.frame()
ageClassLevels <- levels(PatientStress$年齢区分)
  

for (i in c(1:nrow(ageCalssSet))) {
  subset(PatientStress, PatientStress$年齢区分 %in% 
         c(ageCalssLvls$V1[i], ageCalssLvls$V2[i])) %>% 
    wilcox.test(ストレス反応得点 ~ 年齢区分, data = .) %>% 
    print()
}


PatientStress %>% 
  dplyr::group_by(年齢区分) %>%
  tidyr::nest() %>%
  dplyr::mutate(model = map(data,
                            ~wilcox.test(ストレス反応得点 ~ 性別,
                                         data = .) %>% 
                              broom::tidy())) %>% 
  tidyr::unnest(model)
```
:::


## 多元配置分散分析（P170）

```{r}
#| code-summary: "統計量 - 平均 - 多元配置分散分析(Linux)"
#| layout-nrow: 4

AnovaModel.2 <- lm(健康統制感 ~ 性別*年齢区分,
                   data = PatientStress,
                   contrasts = list(性別=contr.sum, 年齢区分=contr.sum))
car::Anova(AnovaModel.2)

car::Tapply(健康統制感 ~ 性別 + 年齢区分, mean, na.action = na.omit,
            data = PatientStress) # means
car::Tapply(健康統制感 ~ 性別 + 年齢区分, sd, na.action = na.omit,
            data = PatientStress) # std. deviations
xtabs(~性別 + 年齢区分, data = PatientStress) # counts
```

::: {.callout-warning collapse="true"}
## Rcmdrのバグ
Linux版のR Commanderにはバグがあるようで上記のコードに修正しないと動作しませんが、WindowsではR Commanderが出力する下記のコードで動作しますので修正は不要です。
```{r, eval=FALSE}
#| code-summary: "統計量 - 平均 - 多元配置分散分析(Windows)"

AnovaModel.2 <- lm(健康統制感 ~ 性別*年齢区分, data=PatientStress,
                   contrasts=list(性別 ="contr.Sum", 年齢区分 ="contr.Sum"))
car::Anova(AnovaModel.2)

car::Tapply(健康統制感 ~ 性別 + 年齢区分, mean, na.action=na.omit,
            data=PatientStress) # means
car::Tapply(健康統制感 ~ 性別 + 年齢区分, sd, na.action=na.omit,
            data=PatientStress) # std. deviations
xtabs(~ 性別 + 年齢区分, data=PatientStress) # counts
```
:::


---
